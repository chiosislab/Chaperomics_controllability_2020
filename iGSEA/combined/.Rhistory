fit <- lmFit (as.matrix(log2.edata), mod)
View(pdata_bm)
set.seed(33353)
svd1 <- svd (log2.edata)
plot (svd1$v[,1])
plot (svd1$v[,1]~pdata_bm_selected$age)
plot (svd1$v[,1])
plot (svd1$v[,1]~pdata_bm_selected$age)
plot (svd1$v[,1],pdata_bm_selected$age)
plot (svd1$v[,1]~pdata_bm_selected$age)
plot (svd1$v[,1]~pdata_bm_selected$race)
plot (svd1$v[,1]~pdata_bm_selected$gender)
plot (svd1$v[,1]~pdata_bm_selected$race)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bodymap_eset.RData")
load(file=con)
close(con)
bm = bodymap.eset
edata = exprs(bm)
pdata_bm=pData(bm)
edata_selected <- edata [,!is.na (pdata_bm$age)]
pdata_bm_selected <- pdata_bm [!is.na (pdata_bm$age),]
mod <- model.matrix(~pdata_bm_selected$age + as.factor(pdata_bm_selected$tissue.type))
fit <- lmFit (as.matrix(edata_selected), mod)
hist (fit$coefficients[,2])
hist (fit$coefficients[,1])
hist (fit$coefficients[,5])
hist (fit$coefficients[,6])
hist (fit$coefficients[,18])
hist (fit$coefficients[,16])
hist (fit$coefficients[,15])
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/bodymap_eset.RData")
load(file=con)
close(con)
bm = bodymap.eset
edata = exprs(bm)
pdata_bm=pData(bm)
edata_selected <- edata [,!is.na (pdata_bm$age)]
pdata_bm_selected <- pdata_bm [!is.na (pdata_bm$age),]
log2.edata <- log2(edata_selected+1)
log2.edata <- log2.edata[!rowMeans(log2.edata)<1, ]
set.seed(33353)
svd1 <- svd (log2.edata)
plot (svd1$v[,1]~pdata_bm_selected$race)
View(pdata_bm_selected)
mod <- model.matrix(~pdata_bm_selected$age)
svd1 <- svd (log2.edata,mod)
svd1 <- svd (log2.edata)
plot (svd1$v[,1]~pdata_bm_selected$gender)
plot (svd1$v[,1]~pdata_bm_selected$age)
fit <- lm(svd1$v[,1]~pdata_bm_selected$age)
fit
cor (svd1$v[,1],pdata_bm_selected$age)
version
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler", version = "3.8")
BiocManager::install("ReactomePA", version = "3.8")
BiocManager::install("GSEABase", version = "3.8")
BiocManager::install("DOSE", version = "3.8")
BiocManager::install("limma", version = "3.8")
install.packages("gplots")
install.packages("ggplot2")
install.packages("limma")
################################################
#### Loading PPI databases (BioGrid+Intact) ####
################################################
#setwd ("~/Google Drive/Project/AD/7-iGSEA/")
#load (file="~/Google Drive/R/PathwayCommons/pc.uniprot.Rdata")
#ppi <- pc.uniprot
#remove (pc.uniprot)
library(doMPI)
load (file="~/Google Drive/R/PPI databases/ppi_2018_0508.Rdata")
#write.csv (ppi, "ppi.csv", row.names = F, quote=F)
################################################
#### Loading Chaperome ID                   ####
################################################
load (file="~/Google Drive/Project/Joshi/MiaPaca_vs_468_2019/3-iGSEA/library/list.chaperome.brehme.uniprot.Rdata")
################################################
#### Loading Data                           ####
################################################
load ("~/Google Drive/Project/Joshi/MiaPaca_vs_468_2019/output/ms1.uniprot.results.Rdata") ## Human AD
input <- ms1.uniprot.results.all
remove (ms1.uniprot.results.all)
uniprot <- read.csv ("~/Google Drive/Project/Joshi/MiaPaca_vs_468_2019/3-iGSEA/library/uniprot-reviewed_human.1220.2017_extended.tab", quote="", header=TRUE, sep="\t", stringsAsFactors = FALSE)
uniprot2entrezID <- read.csv("~/Google Drive/R/UniProt/uniprot2entrezID.csv")
attach.entregene <- function (x,uniprotkb_col) {
output <- merge (x, uniprot2entrezID, by.x=uniprotkb_col,by.y="UNIPROTKB",all.x=TRUE,sort=F)
output <- output [!is.na (output$ENTREZ_GENE),]
return (output)
}
uniprot.entry.name2entreID <- function (x) {
input <- data.frame (ID=x,stringsAsFactors = F)
output <- merge (input, uniprot[,c("Entry.name","Entry")],by.x="ID",by.y="Entry.name",all.x=TRUE,sort=F)
output <- merge (output, uniprot2entrezID, by.x="Entry",by.y="UNIPROTKB",all.x=TRUE,sort=F)
return (output$ENTREZ_GENE)
}
list.chaperome.input <- input$Entry.name [input$Entry %in% list.chaperome.brehme.uniprot$UNIPROTKB]
list.chaperome.input.fulltable <- input [input$Entry %in% list.chaperome.brehme.uniprot$UNIPROTKB,]
list.chaperome.input.fulltable.mean <- list.chaperome.input.fulltable [,grep ("^MS.MS",colnames(list.chaperome.input.fulltable))]
list.chaperome.input.fulltable.mean <- cbind (rowMeans(list.chaperome.input.fulltable.mean[,1:2]), rowMeans(list.chaperome.input.fulltable.mean[,3:4]), rowMeans(list.chaperome.input.fulltable.mean[,5:6]))
colnames(list.chaperome.input.fulltable.mean) <- c("468","Mia","Mia24")
library ("clusterProfiler")
library ("org.Hs.eg.db")
iGSEA.v2 <- function (input, list.chaperome.input, ppi, pAdjustMethod, ont, pvalueCutoff, outputfile) {
for (i in 1:length (list.chaperome.input)) {
if (i==1) {df.total<-NULL
interactors <- NULL
df <- NULL}
inp <- list.chaperome.input[i]
ppi.selected.1 <- ppi[ppi$PARTICIPANT_A_Entry.name %in% inp,]
ppi.selected.2 <- ppi[ppi$PARTICIPANT_B_Entry.name %in% inp,]
interactors <- c(ppi.selected.1$PARTICIPANT_B_Entry, ppi.selected.2$PARTICIPANT_A_Entry) # Switch from UniProt Entry name to Entry
interactors <- interactors [interactors %in% input]
#interactors.entrezID <- uniprot.entry.name2entreID(interactors)
#interactors.entrezID <- interactors.entrezID[!is.na (interactors.entrezID)]
print (paste0("Chaperome_ID:",inp," ",i,"/",length (list.chaperome.input)))
print (paste0("Interactors_ID:",interactors))
if (length(interactors)>0) {
go.enrichment <- enrichGO (interactors, 'org.Hs.eg.db',keyType = "UNIPROT", pAdjustMethod = "BH", ont="BP",readable = T,pvalueCutoff = 0.1)
## Note: Depending on the version of ClusterProfiler, the argment keytype could be either "keyType" or "keytype". "KeyType" was used on iMac-29''
df <- as.data.frame(go.enrichment)
if (nrow (df)>0) {df$Chaperome_ID <- inp}
if (is.null(df.total)) {df.total <- df}
else {df.total <- rbind (df.total, df)}
}
print (df)
}
return (df.total)
#write.table (df.total, outputfile, row.names = F, quote=F,sep="\t")
}
iGSEA.MPI <- function (nc=3, input, list.chaperome, ppi, output_filenames) {
cl <- startMPIcluster(nc)
registerDoMPI(cl)
ptm <- proc.time()
iGSEA.mpi.output <- foreach (i=list.chaperome, o=output_filenames, .combine="rbind") %dopar% {
library ("clusterProfiler")
library ("org.Hs.eg.db")
iGSEA.v2 <- function (input, list.chaperome.input, ppi, pAdjustMethod, ont, pvalueCutoff, outputfile) {
for (i in 1:length (list.chaperome.input)) {
if (i==1) {df.total<-NULL
interactors <- NULL
df <- NULL}
inp <- list.chaperome.input[i]
ppi.selected.1 <- ppi[ppi$PARTICIPANT_A_Entry.name %in% inp,]
ppi.selected.2 <- ppi[ppi$PARTICIPANT_B_Entry.name %in% inp,]
interactors <- c(ppi.selected.1$PARTICIPANT_B_Entry, ppi.selected.2$PARTICIPANT_A_Entry) # Switch from UniProt Entry name to Entry
interactors <- interactors [interactors %in% input]
#interactors.entrezID <- uniprot.entry.name2entreID(interactors)
#interactors.entrezID <- interactors.entrezID[!is.na (interactors.entrezID)]
print (paste0("Chaperome_ID:",inp," ",i,"/",length (list.chaperome.input)))
print (paste0("Interactors_ID:",interactors))
if (length(interactors)>0) {
go.enrichment <- enrichGO (interactors, 'org.Hs.eg.db',keyType = "UNIPROT", pAdjustMethod = "BH", ont="BP",readable = T,pvalueCutoff = 0.1)
## Note: Depending on the version of ClusterProfiler, the argment keytype could be either "keyType" or "keytype". "KeyType" was used on iMac-29''
df <- as.data.frame(go.enrichment)
if (nrow (df)>0) {df$Chaperome_ID <- inp}
if (is.null(df.total)) {df.total <- df}
else {df.total <- rbind (df.total, df)}
}
print (df)
}
return (df.total)
#write.table (df.total, outputfile, row.names = F, quote=F,sep="\t")
}
df <- data.frame(iGSEA.v2 (input, i, ppi, "BH", "BP", 1, ""))
write.csv (df,o)
df}
closeCluster(cl)
proc.time() - ptm
return (iGSEA.mpi.output)
}
##########################################################################################
### LFQ B
##########################################################################################
data.up   <- input [input$LFQ.B.p <= 0.1 & input$LFQ.B.FC > 1,]
data.down <- input [input$LFQ.B.p <= 0.1 & input$LFQ.B.FC < 1,]
data.down <- input [input$LFQ.A.p <= 0.1 & input$LFQ.A.FC < 1,]
data.down$Entry.name
data.down$Entry.name [length(data.down$Entry.name) ]
shiny::runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
load ("~/Google Drive/Project/AD/19-compare_chaperomics_rnaseq/Chaperomics_vs_RNAseq_AD_dataset.Rdata")
View(input_mat)
View(data.chaperomics.rnaseq)
ll("biomaRt", version = "3.8")
library (biomaRt)
## Loading UniProt and Human AD Chaperomics
load ("~/Google Drive/Project/AD/human/Human AD/analyses/output_exp1-3_full//ms1.exp1-3.uniprot.results.Rdata") ## Human AD exp1-3full
load ("~/Google Drive/Project/AD/human/Human AD/analyses/output_exp1-3_full//ms1.exp1-3.uniprot.Rdata") ## Human AD exp1-3full
data.human.ad <- ms1.uniprot.results.all
patients.ad <- unique (regmatches(names (data.human.ad),regexpr("MS.MS.count.AD.[0-9]{4}",names (data.human.ad))))
patients.normal <- unique (regmatches(names (data.human.ad),regexpr("MS.MS.count.Normal.[0-9]{4}",names (data.human.ad))))
row.mean.ad <- sapply (patients.ad, function (x) rowMeans(data.human.ad[,grep (x, names (data.human.ad))],na.rm = T))
row.mean.normal <- sapply (patients.normal, function (x) rowMeans(data.human.ad[,grep (x, names (data.human.ad))],na.rm = T))
data.human.ad.patients <- cbind (row.mean.ad, row.mean.normal)
row.names(data.human.ad.patients) <- data.human.ad$Entry
data.human.ad.patients [is.na(data.human.ad.patients)] <- 0
colnames(data.human.ad.patients) <- gsub ("MS.MS.count.","",colnames(data.human.ad.patients))
data.human.ad.patients.log <- log2(data.human.ad.patients+1)
boxplot (data.human.ad.patients.log,n=100)
input0 <- cbind (data.human.ad, data.human.ad.patients.log)
## Do some new GLM analyses based on MS.MS (log2(x+1) transformed)
data.human.ad.MS2 <- data.human.ad [grep ("^MS.MS.count.",colnames (data.human.ad))]
row.names(data.human.ad.MS2) <- data.human.ad$Entry.name
data.human.ad.MS2 <- log10 (data.human.ad.MS2+1)
matrixx <- data.human.ad.MS2
sample <- factor (c("1067","1067","1067","1067",
"4203","4203","4203", "4203",
"4295","4295","4295","4295",
"4494","4494","4494","4494",
"4522","4522",
"3345","3345",
"3861","3861","3861","3861",
"5265","5265","5265","5265"))
genotype <- factor  (c("AD","AD","AD","AD",
"AD","AD","AD", "AD",
"AD","AD","AD","AD",
"AD","AD","AD","AD",
"AD","AD",
"Normal","Normal",
"Normal","Normal","Normal","Normal",
"Normal","Normal","Normal","Normal"))
data.frame (sample=sample, genotype=genotype)
design <- model.matrix(~0+genotype)
library (limma)
fit <- lmFit(matrixx, design)
cont.matrix <- makeContrasts(ADvsNormal=genotypeAD-genotypeNormal, levels=design)
fit2 <- contrasts.fit (fit, cont.matrix)
fit2 <- eBayes(fit2)
top <- topTable(fit2, number=Inf, sort.by=NULL, resort.by = NULL)
colnames(top) <- paste0 (colnames(top),".GLM.log2MS2")
## Calculate the mean for each individuals.
ids <- c(patients.ad, patients.normal)
ls <- lapply (ids, function (x) rowMeans(matrixx [, grep (x, colnames(matrixx))]))
df <- do.call ("cbind",ls)
colnames (df) <- ids
df.top <- merge (df, top, by="row.names",all=TRUE,sort=F)
View(df.top)
row.names(df.top) <- df.top$Row.names
df.top$Status <- ""
df.top$Status[df.top$logFC.GLM.log2MS2>0] <- "AD>Normal"
df.top$Status[df.top$logFC.GLM.log2MS2<0] <- "AD<Normal"
save (df.top,file="df.top.Rdata")
load ("~/Google Drive/Project/AD/19-compare_chaperomics_rnaseq/df.top")
load ("~/Google Drive/Project/AD/19-compare_chaperomics_rnaseq/df.top.Rdata")
sel <- df.top$adj.P.Val.GLM.log2MS2 <= 0.01 & abs (df.top$logFC.GLM.log2MS2) >= 0.6
input <- as.matrix (df.top[sel, c(2:9)])
Status <- as.factor (df.top$Status[sel])
input2 <- t(apply(input, 1, scale))
colnames(input2) <- colnames(input)
heatmap(input2)
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
log10(0.05)
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
version ()
version
shiny::runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp('Google Drive/Shiny/Test')
runApp()
runApp('Google Drive/Shiny/Test')
runApp()
runApp()
runApp('Google Drive/Shiny/Test')
install.packages("gnm")
library (gnm)
library (BiocManager)
BiocManager::install("TCGAbiolinks")
library (TCGAbiolinks)
#library (BiocManager)
BiocManager::install("TCGAbiolinks")
library(TCGAbiolinks)
#rse <- get(load("LGGIllumina_HiSeq.rda"))
dataClin_LGG <- GDCquery_clinic("TCGA-LGG", "Clinical")
install.packages("cmprsk")
install.packages("~/Downloads/cmprsk_2.2-8.tar", repos = NULL)
version
version(0)
version()
install.packages("~/Downloads/cmprsk_2.2-8.tar.gz", repos = NULL, type = "source")
R.Version()
R.version()
R.version
install.packages("cmprsk")
library(TCGAbiolinks)
#library (BiocManager)
BiocManager::install("TCGAbiolinks")
library (BiocManager)
BiocManager::install("TCGAbiolinks")
install.packages("BiocManager")
library (BiocManager)
BiocManager::install("TCGAbiolinks")
install.packages("vctrs")
library (TCGAbiolinks)
BiocManager::install("TCGAbiolinks")
library (TCGAbiolinks)
install.packages("vctrs")
library(ComplexHeatmap)
detach("package:ComplexHeatmap", unload = TRUE)
query <- GDCquery(project = "TCGA-GBM",
data.category = "Gene expression",
data.type = "Gene expression quantification",
platform = "Illumina HiSeq",
file.type = "results",
sample.type = c("Primary solid Tumor"),
legacy = TRUE)
library (BiocManager)
library (TCGAbiolinks)
library (BiocManager)
BiocManager::install("TCGAbiolinks")
library (TCGAbiolinks)
install.packages("vctrs")
install.packages("vctrs")
library (TCGAbiolinks)
install.packages("vctrs")
library (TCGAbiolinks)
setwd ("~/Google Drive/Project/Joshi/MiaPaca_vs_468_2019/3-iGSEA/combined/")
setwd ("~/Google Drive/Project/Joshi/MiaPaca_vs_468_2019/3-iGSEA/combined/")
iGSEA <- read.csv("sidetable.combined.txt")
View(iGSEA)
iGSEA <- read.csv("iGSEA.selected.combined.txt")
View(iGSEA)
iGSEA <- read.csv("iGSEA.selected.combined.txt",sep = "\t")
View(iGSEA)
chaperome <- unique (iGSEA$Chaperome_ID)
iGSEA <- read.csv("iGSEA.selected.combined.txt",sep = "\t", stringsAsFactors = F)
chaperome <- unique (iGSEA$Chaperome_ID)
df <- iGSEA [iGSEA$Chaperome_ID==chaperome[1],]
View(df)
table (df$Status)
df <- iGSEA [iGSEA$Chaperome_ID==chaperome[2],]
table (df$Status)
table (df$Status)
df <- iGSEA [iGSEA$Chaperome_ID==chaperome[1],]
table (df$Status)
table (df$Status) -> t
t
t1
t[1]
unlist (t)
I(t)
unlist (t)
unlist(t)
data.frame (unlist (t))
data.frame (t)
t(data.frame (t))
data.frame (t)
for (i in 1:length (chaperome)) {
df <- iGSEA [iGSEA$Chaperome_ID==chaperome[i],]
t <- data.frame (table (df$Status))
a <- list (chaperome.id=chaperome[i], t=t)
f <- c(a,f)
}
f <- NULL
for (i in 1:length (chaperome)) {
df <- iGSEA [iGSEA$Chaperome_ID==chaperome[i],]
t <- data.frame (table (df$Status))
a <- list (chaperome.id=chaperome[i], t=t)
f <- c(a,f)
}
f$t
f$t
f$chaperome.id
f
f[1]
f[2]
f[3]
f[4]
for (i in 1:length (chaperome)) {
df <- iGSEA [iGSEA$Chaperome_ID==chaperome[i],]
t <- data.frame (table (df$Status))
a <- list (chaperome[i], t)
f <- c(a,f)
}
f <- NULL
for (i in 1:length (chaperome)) {
df <- iGSEA [iGSEA$Chaperome_ID==chaperome[i],]
t <- data.frame (table (df$Status))
a <- list (chaperome[i], t)
f <- c(a,f)
}
View(f)
f[1]
f[2]
f[3]
f[[1]
]
f[[1]]
f[[2]]
f[[3]]
f <- NULL
for (i in 1:length (chaperome)) {
df <- iGSEA [iGSEA$Chaperome_ID==chaperome[i],]
t <- data.frame (table (df$Status))
a <- data.frame (Chaperome_ID=chaperome[i], t)
f <- rbind (f, a)
}
View(f)
install.packages("dplyr")
f
mat <- reshape(f,timevar = c("Var1"),idvar = c("Chaperome_ID"), direction="wide")
View(mat)
mat [is.na(mat)] <- 0
View(mat)
row.names (mat) <- mat$Chaperome_ID
mat <- subset (mat,select=-Chaperome_ID)
View(mat)
names (mat)
mat.LFQ.B <- mat [,c("Freq.Up.LFQ.B", "Freq.Down.LFQ.B")]
View(mat)
View(mat.LFQ.B)
library (ComplexHeatmap)
Heatmap(mat.LFQ.B)
Heatmap(mat.LFQ.B, col = colorRamp2(c(min(input), max (input)), c("darkblue", "lightblue","yellow", "red")))
library (circlize)
Heatmap(mat.LFQ.B, col = colorRamp2(c(min(input), max (input)), c("darkblue", "lightblue","yellow", "red")))
Heatmap(mat.LFQ.B, col = colorRamp2(c(min(mat.LFQ.B), max (mat.LFQ.B)), c("darkblue", "lightblue","yellow", "red")))
inp <- mat.LFQ.B
Heatmap(inp, col = colorRamp2(c(min(inp),
quantile(inp)[2],
quantile(inp)[3],
max (inp)), c("white", "lightblue","yellow", "red")))
min(inp),
quantile(inp)[2],
quantile(inp)[3],
max (inp)
c(min(inp),
quantile(inp)[2],
quantile(inp)[3],
max (inp))
quantile(inp)[2]
quantile(inp)
quantile(inp)
inp
min (inp)
quantile(inp,1)
quantile(inp)
quantile(as.matrix (inp))
inp <- as.matrix (mat.LFQ.B)
Heatmap(inp, col = colorRamp2(c(min(inp),quantile(inp)[2],
quantile(inp)[3],
max (inp)), c("white", "lightblue","yellow", "red")))
Heatmap(inp, col = colorRamp2(c(min(inp),50,150, max (inp)), c("white", "lightblue","yellow", "red")))
Heatmap(inp, col = colorRamp2(c(min(inp),10,50, max (inp)), c("white", "lightblue","yellow", "red")))
mat.LFQ.B <- mat [,c("Freq.Up.LFQ.A", "Freq.Down.LFQ.A")]
library (ComplexHeatmap)
library (circlize)
inp <- as.matrix (mat.LFQ.A)
Heatmap(inp, col = colorRamp2(c(min(inp),10,50, max (inp)), c("white", "lightblue","yellow", "red")))
mat.LFQ.B <- mat [,c("Freq.Up.LFQ.B", "Freq.Down.LFQ.B")]
mat.LFQ.A <- mat [,c("Freq.Up.LFQ.A", "Freq.Down.LFQ.A")]
library (ComplexHeatmap)
library (circlize)
inp <- as.matrix (mat.LFQ.A)
Heatmap(inp, col = colorRamp2(c(min(inp),10,50, max (inp)), c("white", "lightblue","yellow", "red")))
library (ComplexHeatmap)
library (circlize)
inp <- as.matrix (mat.LFQ.A)
Heatmap(inp, col = colorRamp2(c(min(inp),5,50, max (inp)), c("white", "lightblue","yellow", "red")))
inp <- as.matrix (mat.LFQ.B)
Heatmap(inp, col = colorRamp2(c(min(inp),5,50, max (inp)), c("white", "lightblue","yellow", "red")))
mat.LFQ.combined <- mat [,c("Freq.Up.LFQ.B", "Freq.Down.LFQ.B", "Freq.Up.LFQ.A", "Freq.Down.LFQ.A")]
Heatmap(inp, col = colorRamp2(c(min(inp),5,50, max (inp)), c("white", "lightblue","yellow", "red")), cluster_columns = FALSE)
inp <- as.matrix (mat.LFQ.combined)
Heatmap(inp, col = colorRamp2(c(min(inp),5,50, max (inp)), c("white", "lightblue","yellow", "red")), cluster_columns = FALSE)
pdf ("iGSEA-Counting.pdf", 10, height=0.15*nrow (inp), useDingbats = FALSE)
Heatmap(inp, col = colorRamp2(c(min(inp),5,50, max (inp)), c("white", "lightblue","yellow", "red")), cluster_columns = FALSE)
dev.off()
pdf ("iGSEA-Counting.pdf", 3, height=0.15*nrow (inp), useDingbats = FALSE)
Heatmap(inp, col = colorRamp2(c(min(inp),5,50, max (inp)), c("white", "lightblue","yellow", "red")), cluster_columns = FALSE)
dev.off()
pdf ("iGSEA-Counting.pdf", 4, height=0.15*nrow (inp), useDingbats = FALSE)
Heatmap(inp, col = colorRamp2(c(min(inp),5,50, max (inp)), c("white", "lightblue","yellow", "red")), cluster_columns = FALSE)
dev.off()
pdf ("iGSEA-Counting.pdf", width = 3.5, height=0.15*nrow (inp), useDingbats = FALSE)
Heatmap(inp, col = colorRamp2(c(min(inp),5,50, max (inp)), c("white", "lightblue","yellow", "red")), cluster_columns = FALSE)
dev.off()
colSums(mat.LFQ.combined)
barplot(mat.LFQ.combined)
barplot(mat.LFQ.combined[,1])
barplot(mat.LFQ.combined[,2])
barplot(mat.LFQ.combined[,3])
barplot(mat.LFQ.combined[,4])
barplot(mat.LFQ.combined[,1])
